(page "index.html"
      (:require [inventi.csv :as csv]
                [inventi.core :as core]
                [inventi.ofx :as ofx]
                [inventi.revolut :as revolut]
                [inventi.n26 :as n26]
                [inventi.citadele :as citadele]
                [clojure.string :as st]))

(defc file nil)
(defc file-name nil)

(defc= stmt
  (when file
    (if (st/starts-with? file "Type")
      (revolut/parse-stmt
        (csv/read-csv file :separator \, :quote \"))
      (if (st/starts-with? file "Citadele")
        (citadele/parse-stmt
          (csv/read-csv file :separator \, :quote \"))
        (if (st/starts-with? file "\"Date\"")
          (n26/parse-stmt (csv/read-csv file :separator \, :quote \"))
          (core/parse-stmt (csv/read-csv file)))))))

(defc= ofx
  (when stmt
    (js/Blob. (array (ofx/stmt->ofx stmt)))))

(defc= ofx-file-name
  (when file-name
    (st/replace file-name ".csv" ".ofx")))

(defn read-file! [files]
  (let [f (aget files 0)
        r (js/FileReader.)]
    (reset! file-name (.-name f))
    (set! (.-onload r) #(reset! file (.-result r)))
    (.readAsText r f)))

(defelem statement [{:keys [statement]} _]
  (for-tpl
        [t (cell= (:trx statement))]
        (span
          (p
            (span :class "amount" (cell= (:amount t)))
            (span :class "date" (cell= (:date t)))
             (br)
             (cell= (:payee t))
             (br)
             (cell= (:memo t))
             (br)
             (cell= (:orig t))
             (br)
             (cell= (:id t))))))

(html
  (head (link :href  "style.css" :rel  "stylesheet"))
  (body
    (input :type "file" :change #(read-file! (.. % -target -files)))
    (if-tpl ofx
            (a :download ofx-file-name
               :href (cell= (.createObjectURL js/URL ofx))
               (text "Download ~{ofx-file-name} file")))
    (statement :statement stmt)))
